plugins {
    id "fabric-loom" version "0.5-SNAPSHOT" apply false
    id "com.github.fudge.forgedflowerloom" version "2.0.0" apply false
    id "maven-publish"
}

def gitHash = System.getenv("GIT_HASH")
if (gitHash == null || gitHash.isBlank()) {
    gitHash = "local"
}
def release = System.getenv("RELEASE")
release = release == null ? false : release.toBoolean()

def moduleDep(Project project, String... deps) {
    project.dependencies {
        deps.each {
            implementation project.project(":modules:$it")
        }
    }
}

allprojects {
    apply plugin: "fabric-loom"
    apply plugin: "com.github.fudge.forgedflowerloom"
    apply plugin: "maven-publish"

    group = "${rootProject.group}"
    archivesBaseName = name
    version = "${rootProject.getProperties().get(name)}"
    if (!release) version += "+${gitHash}"

    def binDir = "../../bin/jar/${name}"

    repositories {
        maven {
            url "https://www.cursemaven.com"
            content {
                includeGroup "curse.maven"
            }
        }
    }

    dependencies {
        minecraft "com.mojang:minecraft:${minecraft}"
        mappings "net.fabricmc:yarn:${yarn}:v2"
        modImplementation "net.fabricmc:fabric-loader:${loader}"

        modImplementation "net.fabricmc.fabric-api:fabric-api:${fabric}"

        modImplementation "curse.maven:architectury-419697:${architectury}"
        modImplementation "curse.maven:rhino-416294:${rhino}"
        modApi "curse.maven:kubejs-395864:${kubejs}"
    }

    task sourcesJar(type: Jar, dependsOn: classes) {
        classifier = 'sources'
        from sourceSets.main.allSource
    }

    task copyJarToBin(type: Copy) {
        from remapJar
        from remapSourcesJar
        into binDir
    }

    task clearBin(type: Delete) {
        delete binDir
    }

    afterEvaluate {
        processResources {
            inputs.property "version", project.version

            from(sourceSets.main.resources.srcDirs) {
                include "fabric.mod.json"
                expand "version": project.version
            }

            from(sourceSets.main.resources.srcDirs) {
                exclude "fabric.mod.json"
            }
        }

        tasks.withType(JavaCompile).configureEach {
            it.options.encoding = "UTF-8"

            def targetVersion = 8
            if (JavaVersion.current().isJava9Compatible()) {
                it.options.release = targetVersion
            } else {
                it.sourceCompatibility = JavaVersion.toVersion(targetVersion)
                it.targetCompatibility = JavaVersion.toVersion(targetVersion)
            }
        }

        java {
            withSourcesJar()
        }

        jar {
            from("../../LICENSE")
        }
    }

    publishing {
        publications {
            mavenJava(MavenPublication) {
                artifact(remapJar) {
                    builtBy remapJar
                }
                artifact(sourcesJar) {
                    builtBy remapSourcesJar
                }
            }
        }
    }

    clean.dependsOn clearBin
    build.finalizedBy copyJarToBin
}
